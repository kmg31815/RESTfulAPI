# workflow 名稱
name: Java CI with Maven

# 什麼情況下觸發 workflow
on:
  # main branch 有 push 時觸發 workflow 
  push:
    branches: [ "main" ]
  # main branch 有 Pull Request 時觸發 workflow 
  pull_request:
    branches: [ "main" ]

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: sherry-cluster-1 # cluster name
  GKE_ZONE: us-central1 # cluster zone
  IMAGE: registry.hub.docker.com/sherry50430/jib_repo # image name
  GAR_ZONE: us-central1 # artifact registry zone
  GAR_REPO: google-repo # artifact registry repository

# Job 可以循序或平行執行
jobs:
  # 這個 workflow 只有一個 job，名稱為 "build"
  build:
    # 在作業系統為 ubuntu 的 runner 執行這個 job
    runs-on: ubuntu-latest
    # Steps 會循序執行
    steps:
      # $GITHUB_WORKSPACE 下簽出您的存儲庫，以便您的工作可以訪問它
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Copy settings.xml
        run: cp .github/settings.xml $HOME/.m2/settings.xml
      - name: Build with Maven
        run: mvn compile jib:dockerBuild
      # Setup gcloud CLI
      - id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GKE_SA_KEY }}'
      # Configure Docker to use the gcloud command-line tool as a credential helper for authentication
      - name: Docker configuration
        run: |-
          gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://$GAR_ZONE-docker.pkg.dev
      # Get the GKE credentials so we can deploy to the cluster
      - name: Set up GKE credentials
        uses: google-github-actions/get-gke-credentials@v0
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
      # Push the Docker image to Google Container Registry
      - name: Publish
        run: |-
          docker push "$GAR_ZONE-docker.pkg.dev/$PROJECT_ID/$GAR_REPO/$IMAGE:$IMAGE_TAG"
      # Deploy the Docker image to the GKE cluster
      - name: Deploy
        run: |-
          kubectl apply -f deploy.yml
          kubectl get pods
